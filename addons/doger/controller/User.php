<?php
/**
 * Created by PhpStorm.
 * User: Lazytech
 * Date: 2019/1/1
 * Time: 23:13
 */

namespace addons\doger\controller;

use addons\doger\model\User as UserModel;
use addons\doger\model\Userbasicinfo;
use addons\doger\model\Userfriend;
use addons\doger\model\Usermatch;
use think\Db;
use think\Log;
use think\response\Json;

class User extends Base
{
    protected $noNeedLogin = ['login'];
    protected $noNeedRight = ['*'];

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function login()
    {
        if ($this->auth->isLogin()) {
            $data = $this->auth->getUser();
            $this->success('login success!', $data);
        } else {
            $this->auth->login();
            if ($this->auth->isLogin()) {
                $data = $this->auth->getUser();
                $this->success('login success!', $data);
            } else {
                $this->error('login failed');
            }
        }
    }

    /**
     * 获取用户档案
     * #@param ids array 用户id列表
     */
    public function profile($ids = null)
    {
        $profile_id = $this->request->param('userid');
        $user_id = $this->auth->__get('id');
        if (empty($ids) && !isset($profile_id)) {
            $with = ['basicinfo', 'certification', 'card','prefer','tag'];
            $res = UserModel::get(function ($query) use ($user_id, $with) {
                $query->where('id', $user_id)->with($with);
            }, [], false);
        } else {
//            $allowIds = $this->getAllowIds($user_id);
            $with = ['basicinfo', 'certification', 'card','tag'];
            if ($ids) {
//                $diff = array_diff($ids, $allowIds);
//                if (!count($diff)) {
//                    $res = UserModel::all(function ($query) use ($ids, $with) {
//                        $query->where('id', 'IN', $ids)->with($with);
//                    }, [], true);
//                } else {
//                    $this->error("no right to access");
//                }
            $res = UserModel::all(function ($query) use ($ids, $with) {
                $query->where('id', 'IN', $ids)->with($with);
            }, [], false);
            } else {
                if ($profile_id == $user_id) {
                    $with = ['basicinfo', 'certification', 'card','prefer','tag'];
                }
                $res = UserModel::get(function ($query) use ($profile_id, $with) {
                    $query->where('id', $profile_id)->with($with);
                }, [], false);
                $firend = Db::table('fa_lover_user_friend')->fetchSql(false)->where(function($query) use($profile_id,$user_id){
                    $query->where(['lover_user_id'=>$profile_id,'target_user_id'=>$user_id]);
                })->whereOr(function($query) use($profile_id,$user_id){
                    $query->where(['lover_user_id'=>$user_id,'target_user_id'=>$profile_id]);})->find();
                $res['friend'] = $firend;
//                if (in_array($profile_id, $allowIds)) {
//                    $res = UserModel::get(function ($query) use ($profile_id, $with) {
//                        $query->where('id', $profile_id)->with($with);
//                    }, [], true);
//                } else {
//                    $this->error("no right to access");
//                }
            }
        }

        $this->success('success', $res);
    }

    protected function getAllowIds($user_id)
    {
        $ids = array();
        $matchs = array();
        $friends = array();
        $match = Usermatch::get(function ($query) use ($user_id) {
            $query->where(['lover_user_id' => $user_id])->whereTime('createtime', 'today');
        });
        if ($match) {
            $matchs = explode(',', $match['lover_user_ids']);
        }

        $friend = Userfriend::all(function ($query) use ($user_id) {
            $query->where('lover_user_id', $user_id)->whereOr('target_user_id', $user_id);
        });

        if ($friend) {
            foreach ($friend as $item) {
                $v = (string)$item['lover_user_id'];
                $v1 = (string)$item['target_user_id'];
                array_push($friends, $v, $v1);
            }
        }
        $ids = array_merge($matchs, $friends);
        $ids = array_merge([$user_id,],$ids);
        $ids = array_unique($ids);

        return $ids;
    }

    /**
     * 获取用户今日匹配列表
     * @param date 不传获取当日，传获取指定日期
     * @param detail
     */
    public function match()
    {
        $user_id = $this->auth->__get('id');
        $date = $this->request->param('date');
        if (!$date) {
            $match = Usermatch::get(function ($query) use ($user_id) {
                $query->where(['lover_user_id' => $user_id])->whereTime('createtime', 'today');
            });
        } else {
            $match = Usermatch::get(function ($query) use ($user_id, $date) {
                $query->where(['lover_user_id' => $user_id])->whereTime('createtime', 'between', [$date, date("Y-m-d", strtotime("+1 day", strtotime($date)))]);
            });
        }

        if ($match) {
            $ids = explode(',', $match['lover_user_ids']);
            $res = $this->profile($ids);
        } else {
            //所有用户中随机选取5个
            $ids = \addons\doger\model\User::where(['is_new'=>0,'cert_status'=>1])->column('id');

            $randIndex = array_rand($ids,5);

            $res = $this->profile([$ids[$randIndex[0]],$ids[$randIndex[1]],$ids[$randIndex[2]],$ids[$randIndex[3]],$ids[$randIndex[4]]]);
        }
        $this->success('success', $res);
    }

    /**
     *  获取用户手机号
     */
    public function getphone(){
        $user = $this->auth->getUser();
        $user_id = $user['id'];
        $encryptedData = $this->request->param('encryptedData');
        $iv = $this->request->param('iv');
        $sessionKey = $user['session_key'];
        $config = get_addon_config('doger');
        $appid = $config['wxappid'];
        $data = null;
        $pc = new \addons\doger\library\WXBizDataCrypt($appid, $sessionKey);
        $errCode = $pc->decryptData($encryptedData, $iv, $data);
        if($errCode == 0){
            $json = json_decode($data);
            $phone = $json->purePhoneNumber;
            $basic = Userbasicinfo::get(['lover_user_id'=>$user_id]);
            $basic->phone = $phone;
            $basic->save();
            $this->success('success',$data);
        }
    }

    /**
     *  切换隐身模式 status=0 隐身  status=1  推荐
     */
    public function showme(){
        $user = $this->auth->getUser();
        $user_id = $user['id'];

        //暂时不考虑拉黑情况
        $status = $user['status'] == '0'? '1':'0';
        $u = \addons\doger\model\User::get($user_id);
        $u->status = $status;
        $res = $u->save();

        if($res) {
            $this->success('success',$res);
        } else {
            $this->error('failed',$res);
        }
    }
}